/*************************************************************************************************************
 * La clase InterfazGráfica gestiona la entrada de datos y configura la GUI.                                 *
 *************************************************************************************************************/
import org.jfree.chart.ChartPanel;

import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Arrays;

public class InterfazGrafica extends JFrame implements PropertyChangeListener {

    private JPanel Panel;
    private JPanel tabla;
    private JTextField entrada_dias;
    private JTextField entrada_V;
    private JTextField entrada_E;
    private JTextField entrada_P;
    private JTextArea nombres;
    private JTextArea poblaciones;
    private JButton calcularButton;
    private JButton siguienteButton;
    private JButton anteriorButton;
    protected JPanel graficoTotales;
    protected JPanel graficoPorcentajes;

    /**
     * El constructor crea la GUI y configura las acciones de los botones de calcular, anterior y siguiente
     *
     * @param almacenSimulaciones referencia al almacén para las acciones de los botones
     */
    public InterfazGrafica(Almacen_Simulaciones almacenSimulaciones) {
        setTitle("Simulador de expansión exponencial");
        crearBarraMenu();
        add(Panel);
        pack();
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setVisible(true);
        toFront();
        mostrarAyuda();
        //El botón de calcular llama al método que recupera la entrada de datos.
        calcularButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                entradaDatos(almacenSimulaciones);
            }
        });
        //El boton anterior, llama al método correspondiente del almacén de simulaciones.
        anteriorButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                almacenSimulaciones.getAnterior();
            }
        });
        //El boton siguiente, llama al método correspondiente del almacén de simulaciones.
        siguienteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                almacenSimulaciones.getSiguiente();
            }
        });
    }

    /**
     * Método que recibe la llamada de cambios en las propiedades del objeto auditado (en este caso,
     * se escuchan los cambios del almacén de simulaciones con el añadido o navegación por los resultados)
     * y llama al método que actualiza la salida de los datos por pantalla.
     *
     * @param evento propiedad que ha cambiado, en este caso, el resultado en la posición actual.
     */
    @Override
    public void propertyChange(PropertyChangeEvent evento) {
        salidaDatos((Resultado_Simulacion) evento.getNewValue());
    }

    /**
     * Método que crea y configura una barra de menús.
     */
    private void crearBarraMenu() {
        JMenuBar menubar = new JMenuBar();
        setJMenuBar(menubar);

        JMenu menu = new JMenu("Ayuda");
        menubar.add(menu);
        JMenuItem intro = new JMenuItem("Introduciendo datos");
        intro.addActionListener(e -> mostrarAyuda());
        menu.add(intro);
        JMenuItem acerca = new JMenuItem("Acerca de...");
        acerca.addActionListener(e -> mostrarAcercaDe());
        menu.add(acerca);
    }

    /**
     * Método que muestra un cuadro de diálogo con información de la introducción de los datos en la interfaz
     */
    private void mostrarAyuda() {
        JOptionPane.showMessageDialog(
                null,
                "              Introduzca los datos de simulación en los apartados correspondientes\n\n" +
                        "        Para crear distintas comunidades, introduzca un nombre por línea en el area de texto\n" +
                        "\"Nombres de las comunidades\" y la población en la misma línea del área \"Número de habitantes\"",
                "Introduciendo datos de simulación",
                JOptionPane.INFORMATION_MESSAGE
        );
    }

    /**
     * Método que muestra el cuadro de diálogo de ayuda "Acerca de"
     */
    private void mostrarAcercaDe() {
        JOptionPane.showMessageDialog(
                null,
                "                 - Simulador de expansión de virus -\n" +
                        "PEC curso 2019-2020 Introducción a la Ingeniería de Software\n" +
                        "                     Sergio Flor García 48904986V",
                "Acerca de",
                JOptionPane.INFORMATION_MESSAGE
        );
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        Panel = new JPanel();
        Panel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        Panel.setPreferredSize(new Dimension(1300, 800));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        Panel.add(panel1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Días de la simulación: ");
        panel1.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(265, 16), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Porcentaje de viajeros (común): ");
        panel1.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(265, 16), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Número de contactos E: ");
        panel1.add(label3, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(265, 16), null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Probabilidad de infección P (en %):");
        panel1.add(label4, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(265, 16), null, 0, false));
        entrada_dias = new JTextField();
        panel1.add(entrada_dias, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, 15), null, 0, false));
        entrada_V = new JTextField();
        entrada_V.setText("");
        panel1.add(entrada_V, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, 15), null, 0, false));
        entrada_E = new JTextField();
        panel1.add(entrada_E, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, 15), null, 0, false));
        entrada_P = new JTextField();
        panel1.add(entrada_P, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(30, 15), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        Panel.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, new Dimension(310, 350), 0, false));
        nombres = new JTextArea();
        nombres.setAutoscrolls(false);
        nombres.setColumns(1);
        nombres.setLineWrap(true);
        nombres.setRows(10);
        nombres.setText("");
        nombres.setWrapStyleWord(true);
        panel2.add(nombres, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 150), new Dimension(150, 150), 0, false));
        poblaciones = new JTextArea();
        poblaciones.setAutoscrolls(false);
        poblaciones.setColumns(1);
        poblaciones.setLineWrap(true);
        poblaciones.setRows(10);
        poblaciones.setWrapStyleWord(true);
        panel2.add(poblaciones, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 150), new Dimension(150, 150), 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Nombres de las comunidades");
        panel2.add(label5, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Número de habitantes");
        panel2.add(label6, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        Panel.add(panel3, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel4, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        calcularButton = new JButton();
        calcularButton.setText("Calcular");
        panel4.add(calcularButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        siguienteButton = new JButton();
        siguienteButton.setText("Siguiente");
        panel3.add(siguienteButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        anteriorButton = new JButton();
        anteriorButton.setText("Anterior");
        panel3.add(anteriorButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        Panel.add(panel5, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        graficoTotales = new JPanel();
        graficoTotales.setLayout(new BorderLayout(0, 0));
        panel5.add(graficoTotales, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(300, 500), null, 0, false));
        graficoPorcentajes = new JPanel();
        graficoPorcentajes.setLayout(new BorderLayout(0, 0));
        panel5.add(graficoPorcentajes, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(300, 500), null, 0, false));
        tabla = new JPanel();
        tabla.setLayout(new BorderLayout(0, 0));
        tabla.setEnabled(true);
        Panel.add(tabla, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 2, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(1000, 500), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return Panel;
    }

    /**
     * Método que realiza la recuperación de los datos de usuario y los pasa al main para que cree y coordine
     * los objetos participantes en una simulación.
     *
     * @param almacenSimulaciones referencia al almacén de los resultados de simulaciones
     */
    private void entradaDatos(Almacen_Simulaciones almacenSimulaciones) {
        String[] arrayNombres = nombres.getText().split("\n");
        String[] arrayPoblaciones = poblaciones.getText().split("\n");
        int comunidades = Math.min(arrayNombres.length, arrayPoblaciones.length);
        //Creación del array de datos
        Object[][] datos = new Object[Main.DataIndex.values().length][comunidades];
        //Recuperación de los datos de usuario introducidos en la interfaz
        try {
            datos[Main.DataIndex.DIAS_SIMULACION.ordinal()][0] = Integer.valueOf(entrada_dias.getText().trim());
            datos[Main.DataIndex.E.ordinal()][0] = Integer.valueOf(entrada_E.getText().trim());
            datos[Main.DataIndex.P.ordinal()][0] = Integer.valueOf(entrada_P.getText().trim());
            datos[Main.DataIndex.FECHA_INICIAL.ordinal()][0] = LocalDate.now();
            for (int i = 0; i < comunidades; i++) {
                datos[Main.DataIndex.NOMBRE.ordinal()][i] = arrayNombres[i].trim();
                datos[Main.DataIndex.POBLACION.ordinal()][i] = Integer.valueOf(arrayPoblaciones[i].trim());
                datos[Main.DataIndex.PORCENTAJE_V.ordinal()][i] = Integer.valueOf(entrada_V.getText().trim());
            }
            //Comprobación de que el array de datos no contiene valores menores o igual a 0
            if (Arrays.asList(datos)
                    .stream()
                    .flatMap(array -> Arrays.asList(array).stream())
                    .filter(obj -> obj instanceof Integer)
                    .anyMatch(n -> (int) n <= 0)) {
                throw new NumberFormatException("Valor <= 0");
            }
            //Comprobación de excepciones en la introducción de números y salida del método en caso de que existan.
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(
                    null,
                    "Número incorrecto\n" + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        Main.entradaDatos(datos, almacenSimulaciones);
    }

    /**
     *      * Método que realiza las llamadas correspondientes para actualizar las vistas de datos
     *      *
     *      * @param resultado nuevo resultado para mostrar
     */
    private void salidaDatos(Resultado_Simulacion resultado) {
        actualizarTabla(resultado);
        actualizarGraficos(resultado);
    }

    /**
     * Método que actualiza la vista de datos por tabla
     *
     * @param resultado nuevo resultado a mostrar
     */
    private void actualizarTabla(Resultado_Simulacion resultado) {
        JTable nuevaTabla = new TablaDatos(resultado).getTabla();
        nuevaTabla.setEnabled(false);

        tabla.removeAll();
        tabla.add(new JScrollPane(nuevaTabla));
        tabla.validate();
    }

    /**
     * Método que actualiza la vista de datos por gráficas
     *
     * @param resultado nuevo resultado a mostrar
     */
    private void actualizarGraficos(Resultado_Simulacion resultado) {
        GraficoDatos nuevosGraficos = new GraficoDatos(resultado);
        final ChartPanel totales = new ChartPanel(nuevosGraficos.getTotales());
        final ChartPanel porcentajes = new ChartPanel(nuevosGraficos.getPorcentajes());

        graficoTotales.removeAll();
        graficoTotales.add(totales);
        graficoTotales.validate();
        graficoPorcentajes.removeAll();
        graficoPorcentajes.add(porcentajes);
        graficoPorcentajes.validate();
    }
}
